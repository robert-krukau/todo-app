{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosFilter/TodosFilter.tsx","components/TodoApp/TodoApp.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","removeTodo","changeStatus","editTitle","useState","clicked","setClicked","title","tempTitle","setTempTitle","searchInput","useRef","useEffect","current","focus","className","classNames","completed","editing","type","checked","onClick","id","onDoubleClick","ref","value","onChange","event","target","onKeyDown","key","onBlur","TodoList","items","map","TodosFilter","toggleFilter","toggled","setToggled","href","selected","TodoApp","newTodoTitle","setNewTodoTitle","JSON","parse","localStorage","getItem","todos","setTodos","completeNumber","setCompleteNumber","uncompleteNumber","setUncompleteNumber","toggledTodos","setToggledTodos","setItem","stringify","filter","length","onSubmit","preventDefault","Date","placeholder","find","newArr","item","htmlFor","todoId","filteredTodos","newTitle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1064f270.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  todo: Todo,\n  removeTodo: (todoId: number) => void,\n  changeStatus: (todoId: number) => void,\n  editTitle: (newTitle: string, todoId: number) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  removeTodo,\n  changeStatus,\n  editTitle,\n}) => {\n  const [clicked, setClicked] = useState(false);\n  const [tempTitle, setTempTitle] = useState(todo.title);\n  const searchInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (searchInput.current !== null) {\n      searchInput.current.focus();\n    }\n  }, [clicked]);\n\n  const handleFocus = () => {\n    if (searchInput.current !== null) {\n      searchInput.current.focus();\n    }\n  };\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames({ completed: todo.completed }, { editing: clicked })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onClick={() => changeStatus(todo.id)}\n        />\n        <label\n          onDoubleClick={() => {\n            handleFocus();\n            setClicked(true);\n          }}\n        >\n          {todo.title ? todo.title : `${removeTodo(todo.id)}`}\n        </label>\n        <button type=\"button\" className=\"destroy\" onClick={() => removeTodo(todo.id)} />\n      </div>\n      <input\n        type=\"text\"\n        ref={searchInput}\n        className=\"edit\"\n        value={tempTitle}\n        onChange={event => setTempTitle(event.target.value)}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter') {\n            editTitle(tempTitle, todo.id);\n            setClicked(false);\n          }\n\n          if (event.key === 'Escape') {\n            setClicked(false);\n            setTempTitle(todo.title);\n          }\n        }}\n        onBlur={() => setClicked(false)}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  items: Todo[],\n  removeTodo: (todoId: number) => void,\n  changeStatus: (todoId: number) => void,\n  editTitle: (newTitle: string, todoId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  items,\n  removeTodo,\n  changeStatus,\n  editTitle,\n}) => {\n  return (\n    <ul className=\"todo-list\">\n      {items.map(todo => (\n        <TodoItem\n          todo={todo}\n          removeTodo={removeTodo}\n          changeStatus={changeStatus}\n          editTitle={editTitle}\n        />\n      ))}\n    </ul>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  toggleFilter: (event: string) => void,\n};\n\nexport const TodosFilter: React.FC<Props> = ({ toggleFilter }) => {\n  const [toggled, setToggled] = useState('all');\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({ selected: toggled === 'all' })}\n          onClick={() => {\n            toggleFilter('all');\n            setToggled('all');\n          }}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({ selected: toggled === 'active' })}\n          onClick={() => {\n            toggleFilter('active');\n            setToggled('active');\n          }}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({ selected: toggled === 'completed' })}\n          onClick={() => {\n            toggleFilter('completed');\n            setToggled('completed');\n          }}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport { TodoList } from '../TodoList';\nimport { TodosFilter } from '../TodosFilter';\n\nexport const TodoApp: React.FC = () => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [todos, setTodos] = useState(\n    JSON.parse(localStorage.getItem('items') || '[]'),\n  );\n  const [completeNumber, setCompleteNumber] = useState(0);\n  const [uncompleteNumber, setUncompleteNumber] = useState(0);\n  const [toggledTodos, setToggledTodos] = useState(todos);\n\n  useEffect(() => {\n    localStorage.setItem('items', JSON.stringify(todos));\n\n    setCompleteNumber(todos.filter((todo: { completed: boolean; }) => todo.completed).length);\n    setUncompleteNumber(todos.filter((todo: { completed: boolean; }) => !todo.completed).length);\n\n    setToggledTodos(todos);\n  }, [todos]);\n\n  const addNewTodo = (event: { preventDefault: () => void; }) => {\n    event.preventDefault();\n\n    const todo = {\n      id: +new Date(),\n      title: newTodoTitle,\n      completed: false,\n    };\n\n    if (newTodoTitle) {\n      setTodos([...todos, todo]);\n      setNewTodoTitle('');\n    }\n  };\n\n  const removeTodo = (todoId: number): void => {\n    const filteredTodos = todos.filter((item: { id: number; }) => item.id !== todoId);\n\n    setTodos(filteredTodos);\n  };\n\n  const clearCompleted = (): void => {\n    const filteredTodos = todos.filter((item: { completed: boolean; }) => !item.completed);\n\n    setTodos(filteredTodos);\n  };\n\n  const changeStatus = (todoId: number): void => {\n    setTodos(\n      todos.map((item: { id: number; completed: boolean; }) => {\n        if (item.id === todoId) {\n          return {\n            ...item,\n            completed: !item.completed,\n          };\n        }\n\n        return item;\n      }),\n    );\n  };\n\n  const changeStatusToAll = (): void => {\n    if (todos.find((todo: { completed: boolean; }) => todo.completed !== true)) {\n      const newArr = todos.map((todo: { completed: boolean; }) => (\n        {\n          ...todo,\n          completed: true,\n        }\n      ));\n\n      return setTodos(newArr);\n    }\n\n    return setTodos(\n      todos.map((item: { completed: boolean; }) => {\n        return {\n          ...item,\n          completed: !item.completed,\n        };\n      }),\n    );\n  };\n\n  const editTitle = (newTitle: string, todoId: number): void => {\n    setTodos(\n      todos.map((item: { id: number; title: string }) => {\n        if (item.id === todoId) {\n          return {\n            ...item,\n            title: newTitle,\n          };\n        }\n\n        return item;\n      }),\n    );\n  };\n\n  const toggleFilter = (filter: string) => {\n    switch (filter) {\n      case 'all':\n        return setToggledTodos(todos);\n      case 'active':\n        return setToggledTodos([...todos].filter(\n          (todo: { completed: boolean; }) => !todo.completed,\n        ));\n      case 'completed':\n        return setToggledTodos([...todos].filter(\n          (todo: { completed: boolean; }) => todo.completed,\n        ));\n      default:\n        return 1;\n    }\n  };\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={addNewTodo}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodoTitle}\n            onChange={event => setNewTodoTitle(event.target.value)}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          checked={completeNumber === todos.length}\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={changeStatusToAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          items={toggledTodos}\n          removeTodo={removeTodo}\n          changeStatus={changeStatus}\n          editTitle={editTitle}\n        />\n      </section>\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${uncompleteNumber} ${uncompleteNumber === 1 ? 'item' : 'items'} left`}\n          </span>\n\n          <TodosFilter toggleFilter={toggleFilter} />\n\n          {completeNumber > 0 && (\n            <button type=\"button\" className=\"clear-completed\" onClick={clearCompleted}>\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nconst App: React.FC = () => {\n  return (\n    <section className=\"todoapp\">\n      <TodoApp />\n    </section>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}